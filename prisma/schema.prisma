datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  role          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, name])
}

model Post {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content   String
  author    User?      @relation(fields: [authorId, authorName], references: [id, name])
  authorId  String?
  authorName String?
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Comment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  post          Post        @relation(fields: [postId], references: [id])
  postId        String
  author        User?       @relation(fields: [authorId], references: [id])
  authorId      String?
  createdAt     DateTime    @default(now())
  parentComment Comment?    @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentCommentId String?   @db.ObjectId
  replies       Comment[]   @relation("CommentReplies")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Kurikulum {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  slug           String?  @unique 
  title          String?   
  quote          String?
  quoteFrom      String?
  materi Materi[]

  @@unique([title, slug])
}

model Materi {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  slug           String?      
  title          String?      
  bab            String?
  kurikulum      Kurikulum?  @relation(fields: [kurikulumTitle, kurikulumSlug], references: [title, slug])
  kurikulumTitle String?
  kurikulumSlug  String?
  pembahasan     Pembahasan?
  nomor          Int?

  @@unique([title, slug, id, kurikulumSlug])
}

model Pembahasan {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  materi         Materi?   @relation(fields: [materiTitle, materiSlug, materiId, kurikulumSlug], references: [title, slug, id, kurikulumSlug])
  materiTitle    String?   @unique
  materiSlug     String?   @unique
  materiId       String?   @unique @db.ObjectId
  kurikulumSlug String?
  teori          String?
  contoh         Contoh?
  catatan        Catatan?
  latihan        Latihan?
  kosakata       Kosakata?
  tips           Tips?
  analisa        String?
   

  @@unique([materiTitle, materiSlug, materiId, kurikulumSlug])
}

model Contoh {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  Pembahasan   Pembahasan? @relation(fields: [pembahasanId], references: [id])
  pembahasanId String?     @db.ObjectId @unique
  image        String?
  item         Itemcontoh[]
}

model Kosakata {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  Pembahasan   Pembahasan? @relation(fields: [pembahasanId], references: [id])
  pembahasanId String?     @db.ObjectId @unique
  item         Itemkosakata[]
}

model Catatan {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId 
  Pembahasan   Pembahasan? @relation(fields: [pembahasanId], references: [id])
  pembahasanId String?     @db.ObjectId @unique
  item         Itemcatatan[]
}

model Latihan {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  item         Itemlatihan []
  Pembahasan   Pembahasan? @relation(fields: [pembahasanId], references: [id])
  pembahasanId String?     @db.ObjectId @unique
  petunjuk     String?
}

model Tips {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  item         String?
  Pembahasan   Pembahasan? @relation(fields: [pembahasanId], references: [id])
  pembahasanId String?     @db.ObjectId @unique
}

model Itemlatihan{
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  latihan      Latihan?    @relation(fields: [latihanId], references: [id])
  latihanId    String?     @db.ObjectId
  question     String?
  answer       String?
  input        String?
}

model Itemkosakata{
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  kosakata     Kosakata?   @relation(fields: [kosakataId], references: [id])
  kosakataId   String?     @db.ObjectId
  poin         String?
}

model Itemcontoh{
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  contoh       Contoh?    @relation(fields: [contohId], references: [id])
  contohId     String?     @db.ObjectId
  poin         String?
}

model Itemcatatan {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  catatan      Catatan?    @relation(fields: [catatanId], references: [id])
  catatanId    String?     @db.ObjectId
  poin         String?
}